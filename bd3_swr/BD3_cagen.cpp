// Released on July 9, 2004
#include "../stdafx.h"
#ifndef REAL_TIME

// 系统头文件
#include <malloc.h>
#include <stdlib.h>
#include <stdio.h>

#include "BD3_cagen.h"

// 产生大小为14×10230的CA码表，取值为1(1),-1(0)
char** BD3_bdd2_caGen(void)
{
	short i;
	char* pTable;
	char** LocalCATable;
	
	LocalCATable = (char**)malloc(14*sizeof(char*));//LocalCATable = (char**)malloc(37*sizeof(char*));
	if(LocalCATable==NULL)
	{
		printf("memory allocation error in CA table generation");
		exit(0);
	}
	for (i=0;i<14;i++)//for (i=0;i<37;i++)
	{
		//LocalCATable[i]=(char *)malloc(2046*sizeof(char));
		LocalCATable[i] = (char *)malloc(10230 * sizeof(char));//done
		if (LocalCATable[i]==NULL) 
		{
			printf("memory allocation error in CA table generation");
			exit(0);
		}
	}
	
	
	
	for (i=0;i<14;i++)//for (i=0;i<37;i++)
	{
		pTable = LocalCATable[i];
		BD3_CreateCACodeTable(pTable, i + 1);
		
	}
	return LocalCATable;


}

//void CreateCACodeTable(char svcode[], int prn)
//{
//    int Sel1,Sel2;        
//    int G1_array[2046];   
//    int G2_array[2046];
//    int G1[11]={1,-1,1,-1,1,-1,1,-1,1,-1,1};           
//	int G2[11]={1,-1,1,-1,1,-1,1,-1,1,-1,1};
//	switch (prn)
//	{
//	case 1:            
//		Sel1=1;       
//		Sel2=3;
//		break;
//	case 2:
//		Sel1=1;
//		Sel2=4;
//		break;
//	case 3:
//		Sel1=1;
//		Sel2=5;
//		break;
//	case 4:
//		Sel1=1;
//		Sel2=6;
//		break;
//	case 5:
//		Sel1=1;
//		Sel2=8;
//		break;
//	case 6:
//		Sel1=1;
//		Sel2=9;
//		break;
//	case 7:
//		Sel1=1;
//		Sel2=10;
//		break;
//	case 8:
//		Sel1=1;
//		Sel2=11;
//		break;
//	case 9:
//		Sel1=2;
//		Sel2=7;
//		break;
//	case 10:
//		Sel1=3;
//		Sel2=4;
//		break;
//	case 11:
//		Sel1=3;
//		Sel2=5;
//		break;
//	case 12:
//		Sel1=3;
//		Sel2=6;
//		break;
//	case 13:
//		Sel1=3;
//		Sel2=8;
//		break;
//	case 14:
//		Sel1=3;
//		Sel2=9;
//		break;
//	case 15:
//		Sel1=3;
//		Sel2=10;
//	    break;
//	case 16:
//		Sel1=3;
//		Sel2=11;
//		break;
//	case 17:
//		Sel1=4;
//		Sel2=5;
//		break;
//	case 18:
//		Sel1=4;
//		Sel2=6;
//		break;
//	case 19:
//		Sel1=4;
//		Sel2=8;
//		break;
//    case 20:
//		Sel1=4;
//		Sel2=9;
//		break;
//	case 21:
//		Sel1=4;
//		Sel2=10;
//		break;
//	case 22:
//		Sel1=4;
//		Sel2=11;
//		break;
//	case 23:
//		Sel1=5;
//		Sel2=6;
//		break;
//	case 24:
//		Sel1=5;
//		Sel2=8;
//		break;
//	case 25:
//		Sel1=5;
//		Sel2=9;
//		break;
//	case 26:
//		Sel1=5;
//		Sel2=10;
//		break;
//	case 27:
//		Sel1=5;
//		Sel2=11;
//		break;
//    case 28:
//		Sel1=6;
//		Sel2=8;
//		break;
//	case 29:
//		Sel1=6;
//		Sel2=9;
//		break;
//	case 30:
//		Sel1=6;
//		Sel2=10;
//		break;
//	case 31:
//		Sel1=6;
//		Sel2=11;
//		break;
//	case 32:
//		Sel1=8;
//		Sel2=9;
//		break;
//	case 33:
//		Sel1=8;
//		Sel2=10;
//		break;
//	case 34:
//		Sel1=8;
//		Sel2=11;
//		break;
//	case 35:
//		Sel1=9;
//		Sel2=10;
//		break;
//	case 36:
//		Sel1=9;
//		Sel2=11;
//		break;
//	case 37:
//		Sel1=10;
//		Sel2=11;
//		break;
//	default :
//		printf("The satellite number is invalid. \n");
//	}//end switch
//	for (int i=0;i<2046;i++)              
//	{
//		G1_array[i]=G1[10]; 
//		int temp1=G1[0];                        
//		G1[0]=G1[0]*G1[6]*G1[7]*G1[8]*G1[9]*G1[10];  
//		G1[10]=G1[9];                      
//		G1[9]=G1[8];
//		G1[8]=G1[7]; 
//		G1[7]=G1[6]; 
//		G1[6]=G1[5]; 
//		G1[5]=G1[4]; 
//		G1[4]=G1[3]; 
//		G1[3]=G1[2]; 
//		G1[2]=G1[1]; 
//		G1[1]=temp1;     
//		
//		
//		G2_array[i]=G2[Sel1-1]*G2[Sel2-1];
//		int temp2=G2[0];
//		G2[0]=G2[0]*G2[1]*G2[2]*G2[3]*G2[4]*G2[7]*G2[8]*G2[10];
//		G2[10]=G2[9];                          
//		G2[9]=G2[8];
//		G2[8]=G2[7]; 
//		G2[7]=G2[6]; 
//		G2[6]=G2[5]; 
//		G2[5]=G2[4]; 
//		G2[4]=G2[3]; 
//		G2[3]=G2[2]; 
//		G2[2]=G2[1]; 
//		G2[1]=temp2; 
//	}
//
//	for (int l=0;l<2046;l++)
//	{
//		
//		svcode[l]=(char)G1_array[l]*G2_array[l];   
//	} 
//
//	return;
//
//}

//void CreateCACodeTable(char svcode[], int prn)
//{
//	//int Sel1, Sel2;
//	int G1_array[10230];
//	int G2_array[10230];
//	char svcode1[10230] = { 0 };
//	int G1[13] = { -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1 };
//	int G2[13] = { 1,1,1,1,1,1,1,1,1,1,1,1,1 };
//	switch (prn)
//	{
//	case 1:
//		G2[0] = -1;
//		G2[1] = 1;
//		G2[2] = -1;
//		G2[3] = 1;
//		G2[4] = -1;
//		G2[5] = -1;
//		G2[6] = -1;
//		G2[7] = -1;
//		G2[8] = -1;
//		G2[9] = -1;
//		G2[10] = -1;
//		G2[11] = -1;
//		G2[12] = -1;
//		break;
//	case 2:
//		G2[0] = -1;
//		G2[1] = -1;
//		G2[2] = -1;
//		G2[3] = -1;
//		G2[4] = 1;
//		G2[5] = 1;
//		G2[6] = 1;
//		G2[7] = -1;
//		G2[8] = 1;
//		G2[9] = -1;
//		G2[10] = 1;
//		G2[11] = -1;
//		G2[12] = -1;
//		break;
//	case 3:
//		G2[0] = -1;
//		G2[1] = 1;
//		G2[2] = -1;
//		G2[3] = -1;
//		G2[4] = -1;
//		G2[5] = -1;
//		G2[6] = 1;
//		G2[7] = 1;
//		G2[8] = 1;
//		G2[9] = -1;
//		G2[10] = 1;
//		G2[11] = -1;
//		G2[12] = 1;
//		break;
//	case 4:
//		G2[0] = -1;
//		G2[1] = -1;
//		G2[2] = -1;
//		G2[3] = -1;
//		G2[4] = -1;
//		G2[5] = -1;
//		G2[6] = -1;
//		G2[7] = -1;
//		G2[8] = -1;
//		G2[9] = -1;
//		G2[10] = 1;
//		G2[11] = -1;
//		G2[12] = -1;
//		break;
//	case 5:
//		G2[0] = -1;
//		G2[1] = -1;
//		G2[2] = 1;
//		G2[3] = 1;
//		G2[4] = -1;
//		G2[5] = 1;
//		G2[6] = 1;
//		G2[7] = 1;
//		G2[8] = -1;
//		G2[9] = -1;
//		G2[10] = -1;
//		G2[11] = -1;
//		G2[12] = -1;
//		break;
//	case 6:
//		G2[0] = -1;
//		G2[1] = 1;
//		G2[2] = 1;
//		G2[3] = -1;
//		G2[4] = 1;
//		G2[5] = 1;
//		G2[6] = -1;
//		G2[7] = -1;
//		G2[8] = 1;
//		G2[9] = 1;
//		G2[10] = -1;
//		G2[11] = 1;
//		G2[12] = 1;
//		break;
//	case 7:
//		G2[0] = -1;
//		G2[1] = -1;
//		G2[2] = -1;
//		G2[3] = -1;
//		G2[4] = -1;
//		G2[5] = -1;
//		G2[6] = -1;
//		G2[7] = 1;
//		G2[8] = -1;
//		G2[9] = 1;
//		G2[10] = 1;
//		G2[11] = -1;
//		G2[12] = 1;
//		break;
//	case 8:
//		G2[0] = -1;
//		G2[1] = -1;
//		G2[2] = -1;
//		G2[3] = 1;
//		G2[4] = -1;
//		G2[5] = -1;
//		G2[6] = -1;
//		G2[7] = -1;
//		G2[8] = -1;
//		G2[9] = -1;
//		G2[10] = -1;
//		G2[11] = 1;
//		G2[12] = -1;
//		break;
//	case 9:
//		G2[0] = -1;
//		G2[1] = 1;
//		G2[2] = -1;
//		G2[3] = 1;
//		G2[4] = 1;
//		G2[5] = 1;
//		G2[6] = 1;
//		G2[7] = 1;
//		G2[8] = 1;
//		G2[9] = 1;
//		G2[10] = 1;
//		G2[11] = -1;
//		G2[12] = 1;
//		break;
//	case 10:
//		G2[0] = 1;
//		G2[1] = 1;
//		G2[2] = -1;
//		G2[3] = 1;
//		G2[4] = 1;
//		G2[5] = 1;
//		G2[6] = 1;
//		G2[7] = 1;
//		G2[8] = -1;
//		G2[9] = -1;
//		G2[10] = 1;
//		G2[11] = -1;
//		G2[12] = -1;
//		break;
//	case 11:
//		G2[0] = -1;
//		G2[1] = -1;
//		G2[2] = -1;
//		G2[3] = 1;
//		G2[4] = -1;
//		G2[5] = 1;
//		G2[6] = -1;
//		G2[7] = -1;
//		G2[8] = -1;
//		G2[9] = 1;
//		G2[10] = 1;
//		G2[11] = 1;
//		G2[12] = 1;
//		break;
//	case 12:
//		G2[0] = 1;
//		G2[1] = 1;
//		G2[2] = -1;
//		G2[3] = 1;
//		G2[4] = -1;
//		G2[5] = -1;
//		G2[6] = 1;
//		G2[7] = 1;
//		G2[8] = -1;
//		G2[9] = -1;
//		G2[10] = -1;
//		G2[11] = -1;
//		G2[12] = 1;
//		break;
//	case 13:
//		G2[0] = 1;
//		G2[1] = -1;
//		G2[2] = -1;
//		G2[3] = 1;
//		G2[4] = 1;
//		G2[5] = -1;
//		G2[6] = 1;
//		G2[7] = 1;
//		G2[8] = -1;
//		G2[9] = 1;
//		G2[10] = -1;
//		G2[11] = 1;
//		G2[12] = -1;
//		break;
//	case 14:
//		G2[0] = 1;
//		G2[1] = -1;
//		G2[2] = -1;
//		G2[3] = -1;
//		G2[4] = 1;
//		G2[5] = 1;
//		G2[6] = 1;
//		G2[7] = -1;
//		G2[8] = 1;
//		G2[9] = 1;
//		G2[10] = -1;
//		G2[11] = -1;
//		G2[12] = 1;
//		break;
//	case 15:
//		G2[0] = -1;
//		G2[1] = 1;
//		G2[2] = 1;
//		G2[3] = 1;
//		G2[4] = -1;
//		G2[5] = -1;
//		G2[6] = 1;
//		G2[7] = 1;
//		G2[8] = 1;
//		G2[9] = -1;
//		G2[10] = 1;
//		G2[11] = 1;
//		G2[12] = -1;
//		break;
//	case 16:
//		G2[0] = -1;
//		G2[1] = -1;
//		G2[2] = -1;
//		G2[3] = 1;
//		G2[4] = 1;
//		G2[5] = 1;
//		G2[6] = -1;
//		G2[7] = -1;
//		G2[8] = -1;
//		G2[9] = -1;
//		G2[10] = -1;
//		G2[11] = 1;
//		G2[12] = 1;
//		break;
//	case 17:
//		G2[0] = 1;
//		G2[1] = 1;
//		G2[2] = -1;
//		G2[3] = 1;
//		G2[4] = 1;
//		G2[5] = -1;
//		G2[6] = -1;
//		G2[7] = 1;
//		G2[8] = 1;
//		G2[9] = 1;
//		G2[10] = -1;
//		G2[11] = 1;
//		G2[12] = -1;
//		break;
//	case 18:
//		G2[0] = 1;
//		G2[1] = 1;
//		G2[2] = 1;
//		G2[3] = 1;
//		G2[4] = 1;
//		G2[5] = -1;
//		G2[6] = -1;
//		G2[7] = -1;
//		G2[8] = 1;
//		G2[9] = -1;
//		G2[10] = -1;
//		G2[11] = 1;
//		G2[12] = 1;
//		break;
//	case 19:
//		G2[0] = -1;
//		G2[1] = 1;
//		G2[2] = 1;
//		G2[3] = 1;
//		G2[4] = -1;
//		G2[5] = 1;
//		G2[6] = -1;
//		G2[7] = 1;
//		G2[8] = -1;
//		G2[9] = 1;
//		G2[10] = -1;
//		G2[11] = -1;
//		G2[12] = -1;
//		break;
//	case 20:
//		G2[0] = 1;
//		G2[1] = 1;
//		G2[2] = 1;
//		G2[3] = -1;
//		G2[4] = 1;
//		G2[5] = -1;
//		G2[6] = -1;
//		G2[7] = 1;
//		G2[8] = -1;
//		G2[9] = -1;
//		G2[10] = -1;
//		G2[11] = -1;
//		G2[12] = 1;
//		break;
//	case 21:
//		G2[0] = 1;
//		G2[1] = 1;
//		G2[2] = -1;
//		G2[3] = 1;
//		G2[4] = 1;
//		G2[5] = 1;
//		G2[6] = 1;
//		G2[7] = -1;
//		G2[8] = 1;
//		G2[9] = -1;
//		G2[10] = -1;
//		G2[11] = 1;
//		G2[12] = -1;
//		break;
//	case 22:
//		G2[0] = 1;
//		G2[1] = 1;
//		G2[2] = -1;
//		G2[3] = 1;
//		G2[4] = -1;
//		G2[5] = -1;
//		G2[6] = 1;
//		G2[7] = 1;
//		G2[8] = 1;
//		G2[9] = -1;
//		G2[10] = 1;
//		G2[11] = -1;
//		G2[12] = 1;
//		break;
//	case 23:
//		G2[0] = 1;
//		G2[1] = 1;
//		G2[2] = 1;
//		G2[3] = -1;
//		G2[4] = 1;
//		G2[5] = -1;
//		G2[6] = -1;
//		G2[7] = 1;
//		G2[8] = 1;
//		G2[9] = -1;
//		G2[10] = -1;
//		G2[11] = -1;
//		G2[12] = -1;
//		break;
//	case 24:
//		G2[0] = 1;
//		G2[1] = 1;
//		G2[2] = -1;
//		G2[3] = -1;
//		G2[4] = 1;
//		G2[5] = 1;
//		G2[6] = -1;
//		G2[7] = -1;
//		G2[8] = 1;
//		G2[9] = 1;
//		G2[10] = 1;
//		G2[11] = -1;
//		G2[12] = 1;
//		break;
//	case 25:
//		G2[0] = 1;
//		G2[1] = 1;
//		G2[2] = -1;
//		G2[3] = -1;
//		G2[4] = -1;
//		G2[5] = 1;
//		G2[6] = -1;
//		G2[7] = 1;
//		G2[8] = 1;
//		G2[9] = -1;
//		G2[10] = 1;
//		G2[11] = 1;
//		G2[12] = 1;
//		break;
//	case 26:
//		G2[0] = 1;
//		G2[1] = -1;
//		G2[2] = 1;
//		G2[3] = 1;
//		G2[4] = -1;
//		G2[5] = 1;
//		G2[6] = 1;
//		G2[7] = -1;
//		G2[8] = 1;
//		G2[9] = -1;
//		G2[10] = 1;
//		G2[11] = 1;
//		G2[12] = -1;
//		break;
//	case 30:
//		G2[0] = 1;
//		G2[1] = -1;
//		G2[2] = -1;
//		G2[3] = -1;
//		G2[4] = -1;
//		G2[5] = -1;
//		G2[6] = -1;
//		G2[7] = -1;
//		G2[8] = -1;
//		G2[9] = -1;
//		G2[10] = -1;
//		G2[11] = -1;
//		G2[12] = -1;
//		break;
//	case 27:
//		G2[0] = -1;
//		G2[1] = 1;
//		G2[2] = -1;
//		G2[3] = -1;
//		G2[4] = 1;
//		G2[5] = -1;
//		G2[6] = -1;
//		G2[7] = 1;
//		G2[8] = -1;
//		G2[9] = 1;
//		G2[10] = 1;
//		G2[11] = -1;
//		G2[12] = -1;
//		break;
//	case 28:
//		G2[0] = -1;
//		G2[1] = 1;
//		G2[2] = -1;
//		G2[3] = 1;
//		G2[4] = -1;
//		G2[5] = -1;
//		G2[6] = -1;
//		G2[7] = -1;
//		G2[8] = 1;
//		G2[9] = 1;
//		G2[10] = 1;
//		G2[11] = -1;
//		G2[12] = 1;
//		break;
//	case 29:
//		G2[0] = 1;
//		G2[1] = 1;
//		G2[2] = 1;
//		G2[3] = -1;
//		G2[4] = 1;
//		G2[5] = -1;
//		G2[6] = -1;
//		G2[7] = -1;
//		G2[8] = -1;
//		G2[9] = 1;
//		G2[10] = -1;
//		G2[11] = 1;
//		G2[12] = -1;
//		break;
//	case 31:
//		G2[0] = 1;
//		G2[1] = -1;
//		G2[2] = -1;
//		G2[3] = 1;
//		G2[4] = -1;
//		G2[5] = -1;
//		G2[6] = 1;
//		G2[7] = 1;
//		G2[8] = 1;
//		G2[9] = -1;
//		G2[10] = -1;
//		G2[11] = -1;
//		G2[12] = -1;
//		break;
//	case 32:
//		G2[0] = -1;
//		G2[1] = 1;
//		G2[2] = -1;
//		G2[3] = 1;
//		G2[4] = -1;
//		G2[5] = -1;
//		G2[6] = 1;
//		G2[7] = 1;
//		G2[8] = 1;
//		G2[9] = -1;
//		G2[10] = 1;
//		G2[11] = 1;
//		G2[12] = -1;
//		break;
//
//	default:
//		printf("The satellite number is invalid. \n");
//
//	}//end switch
//	 //定义两个循环使G1和G2一直更新
//	int temp1;
//	for (int i = 0;i < 8190;++i)
//	{
//		G1_array[i] = G1[12];
//		//若G1相位变为“1111111111100”，则将G1码序列产生器置初相 
//		if ((G1[0] == -1) && (G1[1] == -1) && (G1[2] == -1) && (G1[3] == -1) && (G1[4] == -1) && (G1[5] == -1) && (G1[6] == -1) && (G1[7] == -1) && (G1[8] == -1) && (G1[9] == -1) && (G1[10] == -1) && (G1[11] == 1) && (G1[12] == 1))
//		{
//			G1[11] = -1;
//			G1[12] = -1;
//		}
//		temp1 = G1[0];
//		G1[0] = G1[0] * G1[2] * G1[3] * G1[12];
//		G1[12] = G1[11];
//		G1[11] = G1[10];
//		G1[10] = G1[9];
//		G1[9] = G1[8];
//		G1[8] = G1[7];
//		G1[7] = G1[6];
//		G1[6] = G1[5];
//		G1[5] = G1[4];
//		G1[4] = G1[3];
//		G1[3] = G1[2];
//		G1[2] = G1[1];
//		G1[1] = temp1;
//	}
//	int temp2;
//	for (int i = 0; i < 8191;++i)
//	{
//		G2_array[i] = G2[12];
//		temp2 = G2[0];
//		G2[0] = G2[0] * G2[4] * G2[5] * G2[6] * G2[8] * G2[9] * G2[11] * G2[12];
//		G2[12] = G2[11];
//		G2[11] = G2[10];
//		G2[10] = G2[9];
//		G2[9] = G2[8];
//		G2[8] = G2[7];
//		G2[7] = G2[6];
//		G2[6] = G2[5];
//		G2[5] = G2[4];
//		G2[4] = G2[3];
//		G2[3] = G2[2];
//		G2[2] = G2[1];
//		G2[1] = temp2;
//	}
//	for (int k = 0; k < 2040;++k)     //G1_array截短1bit，变成周期为8190bit，然后扩展为10230bit
//	{
//		G1_array[k + 8190] = G1_array[k];
//	}
//	for (int kk = 0; kk < 2039; ++kk)     //G2_array周期为8191bit，然后扩展为10230bit
//	{
//		G2_array[kk + 8191] = G2_array[kk];
//	}
//	//将G1_array和G2_array异或得到测距伪码
//	for (int l = 0;l<10230;l++)
//	{
//		svcode[l] = G1_array[l] * G2_array[l];//CA_CODE1[12][2046]用来存放产生的第一种测距码
//		//svcode1[l] = G1_array[l] * G2_array[l];   
//		//if (svcode1[l] = -1)
//		//{
//		//	svcode[l] = 1;
//		//}
//		//else 
//		//{
//		//	svcode[l] = -1;
//		//}
//	}
//
//	return ;
//
//}
void BD3_CreateCACodeTable(char svcode[], int prn)
{
	int code[10230]={0};
	int temp1;//定义中间变量
	int temp2;//定义中间变量
	int G_R1[13]={1,1,1,1,1,1,1,1,1,1,1,1,1};
	int G_R2[13];
	int a[13]={0,0,1,1,1,1,1,1,1,1,1,1,1};
	int b[13]={1,1,1,1,1,1,1,1,1,1,1,1,1};
	int trans[15][13] = {{0},{1,1,1,1,1,1,1,1,1,0,1,0,1},{1,1,0,1,0,1,0,0,0,1,1,1,1},{0,1,0,1,0,0,0,1,1,1,1,0,1},{1,1,0,1,1,1,1,1,1,1,1,1,1},
	{1,1,1,1,1,0,0,0,1,0,0,1,1},{0,0,1,0,0,1,1,0,0,1,0,0,1},{0,1,0,0,1,0,1,1,1,1,1,1,1},{1,0,1,1,1,1,1,1,1,0,1,1,1},{0,1,0,0,0,0,0,0,0,0,1,0,1},
	{1,1,0,1,1,0,0,0,0,0,1,0,0},{0,0,0,0,1,1,1,0,1,0,1,1,1},{0,1,1,1,1,0,0,1,1,0,1,0,0},{1,0,1,0,1,0,0,1,0,0,1,1,0},{0,1,1,0,0,1,0,0,0,1,1,1,0}};//临时矩阵，为了根据不同sat_num取值给G_R2赋值
	int n,i,j,t;
	if(prn == 0) 
		for (t=0;t<13;t++)
			G_R2[t] = trans[0][t];
	else if(prn == 1) 
		for (t=0;t<13;t++)
			G_R2[t] = trans[1][t];
	else if(prn == 2) 
		for (t=0;t<13;t++)
			G_R2[t] = trans[2][t];	
	else if(prn == 3) 
		for (t=0;t<13;t++)
			G_R2[t] = trans[3][t];
	else if(prn == 4) 
		for (t=0;t<13;t++)
			G_R2[t] = trans[4][t];
	else if(prn == 5) 
		for (t=0;t<13;t++)
			G_R2[t] = trans[5][t];
	else if(prn == 6) 
		for (t=0;t<13;t++)
			G_R2[t] = trans[6][t];
	else if(prn == 7) 
		for (t=0;t<13;t++)
			G_R2[t] = trans[7][t];
	else if(prn == 8) 
		for (t=0;t<13;t++)
			G_R2[t] = trans[8][t];
	else if(prn == 9) 
		for (t=0;t<13;t++)
			G_R2[t] = trans[9][t];
	else if(prn == 10) 
		for (t=0;t<13;t++)
			G_R2[t] = trans[10][t];
	else if(prn == 11) 
		for (t=0;t<13;t++)
			G_R2[t] = trans[11][t];
	else if(prn == 12) 
		for (t=0;t<13;t++)
			G_R2[t] = trans[12][t];
	else if(prn == 13) 
		for (t=0;t<13;t++)
			G_R2[t] = trans[13][t];
	else if(prn == 14) 
		for (t=0;t<13;t++)
			G_R2[t] = trans[14][t];
	for (n=0;n<10230;n++)
	{
		code[n] = G_R1[0]^G_R2[0];
		if(memcmp(G_R1,a,sizeof(int)*13)==0)
		{
			for (t=0;t<13;t++)
				G_R1[t] = b[t];
		}
		else
		{
			temp1 = (G_R1[12]+G_R1[10]+G_R1[9]+G_R1[0])%2;
			for (i=0;i<12;i++)
				G_R1[i] = G_R1[i+1];
			G_R1[12] = temp1;
				
		}
		temp2 = (G_R2[12]+G_R2[8]+G_R2[7]+G_R2[6]+G_R2[4]+G_R2[3]+G_R2[1]+G_R2[0])%2;
		for (j=0;j<12;j++)
			G_R2[j] = G_R2[j+1];
		G_R2[12] = temp2;
		
	}
    for (int i=0;i<10230;i++)
	{
		if(code[i]==0){
			//svcode[i]=-1;
			svcode[i] =0;
		}
		else
		{
			//svcode[i]=1;
			svcode[i] = 1;
		}
		
	}
	return ;
}

// 在主程序最后必须释放caTable
void BD3_freeCaTable(char** caTable)
{
	short i;
	for (i=0;i<14;i++)
	{
		free(caTable[i]);
	}
	free(caTable);
}

#endif